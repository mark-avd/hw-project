{"version":3,"sources":["utils/api.ts","stores/store.ts","components/templates/AuthTemplate/index.tsx","components/atoms/Button/index.tsx","components/atoms/GreetingText/index.tsx","components/molecules/FormField/index.tsx","components/organisms/LoginForm/index.tsx","components/organisms/RegisterForm/index.tsx","pages/AuthPage/index.tsx","hooks/useToken.ts","App.tsx","index.tsx","utils/utils.ts","utils/websocket.ts","components/atoms/Input/index.tsx","components/atoms/LastSeenMessage/index.tsx","components/molecules/ChatCompanion/index.tsx","components/molecules/ChatInputArea/index.tsx","components/atoms/Text/index.tsx","components/molecules/Bubble/index.tsx","components/organisms/ChatMessages/index.tsx","components/organisms/Chat/index.tsx","components/molecules/ChatHeader/index.tsx","components/atoms/Text2/index.tsx","components/molecules/ChatPreview/index.tsx","components/molecules/NoChatsMessage/index.tsx","components/organisms/ChatSideBar/index.tsx","components/molecules/SelectChatMessage/index.tsx","components/templates/ChatTemplate/index.tsx","assets/vector-left.svg","assets/vector-right.svg","assets/attachment-icon.svg","assets/user-icon-male.svg","assets/user-icon-female.svg","assets/error-input-icon.svg","assets/send-icon.svg","assets/no-chats-icon.svg","assets/header-profile-icon.svg","assets/back-arrow-icon.svg","assets/loading-icon.svg","assets/file-icon.svg","components/atoms/Icon/index.tsx"],"names":["BASE_URL","CAPTCHA_URL","GENDERS_URL","AUTH_URL","REGISTRATION_URL","FILE_UPLOAD_URL","WS_CONNECTION_URL","store","selectedChat","user","person","outFile","users","messages","makeAutoObservable","this","chatId","name","gender","AuthTemplate","children","className","Button","buttonText","isDisabled","type","isPrimary","onClick","buttonClass","classNames","button_primary","button_secondary","disabled","GreetingText","greeting","FormField","placeholder","label","errorText","isError","register","select","optionList","formFieldErrorClass","htmlFor","Input","Icon","LoginForm","captchaURL","renderRegisterForm","handleToken","useState","error","setError","captchaError","setCaptchaError","validationSchema","Yup","shape","login","required","min","max","password","captcha","useForm","resolver","yupResolver","mode","handleSubmit","formState","errors","isValid","onSubmit","data","loginRequest","url","a","fetch","method","body","credentials","response","status","text","token","undefined","getFormData","message","src","alt","RegisterForm","renderLoginForm","password_confirm","when","field","oneOf","gender_id","reset","genderList","setGenderList","useEffect","fetchGenders","ok","json","genders","registerRequest","console","AuthPage","registerForm","setRegisterForm","useToken","localStorage","getItem","slice","getToken","setToken","userToken","setItem","ChatPage","React","lazy","App","Suspense","fallback","ChatTemplate","isSuspended","exact","path","component","to","ReactDOM","render","StrictMode","document","getElementById","object","formData","FormData","Object","keys","forEach","key","append","openInNewTab","newWindow","window","open","opener","websocketInstance","socketInstance","socketChat","WebSocket","onopen","websocketSendType","onmessage","event","eventData","close","removeItem","runInAction","includes","JSON","parse","send","onerror","onclose","connectionKey","sort","join","toLowerCase","parsedEventData","push","stringify","senderId","file","date","Date","noBorder","onChange","inputClass","input","input_errored","input_borderless","defaultValue","value","hidden","map","item","id","values","capitalisedLetter","toString","toUpperCase","rest","LastSeenMessage","timePassed","observer","closeMessages","companion","innerWidth","ChatInputArea","hiddenFileInput","useRef","fileInputChange","target","files","fileUrl","size","sendMessage","ref","current","click","Text","Bubble","isIncoming","bubbleClass","bubble","bubble_incoming","bubble_outgoing","messagesAnchorRef","messageAreaClass","Chat","ChatHeader","Text2","isOutgoing","isActive","setActive","chatPreviewClass","length","substring","openMessages","chatConnect","mes","NoChatsMessage","index","SelectChatMessage","isHeaderHidden","setHeaderHidden","isSideBarHidden","setSideBarHidden","isChatVisible","setChatVisible","sideBarClass","chatClass","hideHeader","hide","leftIcon","rightIcon","attachmentIcon","maleIcon","femaleIcon","errorIcon","sendIcon","noChatsIcon","profileIcon","arrowBackIcon","loadingIcon","fileIcon"],"mappings":"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","file":"static/js/main.81b38a8f.chunk.js","sourcesContent":["export const BASE_URL = 'http://109.194.37.212:93'\r\nexport const CAPTCHA_URL = 'http://109.194.37.212:93/api/auth/captcha'\r\nexport const GENDERS_URL = 'http://109.194.37.212:93/api/auth/'\r\nexport const AUTH_URL = 'http://109.194.37.212:93/api/auth/login'\r\nexport const REGISTRATION_URL = 'http://109.194.37.212:93/api/auth/register'\r\nexport const FILE_UPLOAD_URL = 'http://109.194.37.212:93/api/upload'\r\nexport const WS_CONNECTION_URL = 'ws://109.194.37.212:2346/'\r\n","import { makeAutoObservable } from 'mobx'\r\nimport { FileType, MessageInterface, UserType } from '../utils/types'\r\n\r\nclass Store {\r\n    selectedChat: number | undefined\r\n    user: UserType | undefined\r\n    person: UserType | undefined\r\n    outFile: FileType | undefined\r\n\r\n    users: Array<UserType> = []\r\n    messages: Array<MessageInterface> = []\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openMessages(chatId: number, name: string, gender: string): void {\r\n        this.selectedChat = chatId\r\n        this.person = { name, gender }\r\n    }\r\n}\r\n\r\nexport const store = new Store()\r\n","import React from 'react'\r\nimport './style.scss'\r\n\r\nconst AuthTemplate: React.FC = ({ children }) => {\r\n    return (\r\n        <div className={'auth'}>\r\n            <div className={'auth__form'}>{children}</div>\r\n            <div className={'auth__background'} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthTemplate\r\n","import React from 'react'\r\nimport './style.scss'\r\nimport classNames from 'classnames'\r\n\r\ninterface Button {\r\n    type: 'button' | 'submit' | 'reset' | undefined\r\n    buttonText: string\r\n    isDisabled: boolean\r\n    isPrimary?: boolean\r\n    onClick?: () => void\r\n}\r\n\r\nconst Button: React.FC<Button> = ({ buttonText, isDisabled, type, isPrimary = true, onClick }) => {\r\n    const buttonClass = classNames({\r\n        button_primary: isPrimary,\r\n        button_secondary: !isPrimary,\r\n    })\r\n    return (\r\n        <button className={buttonClass} disabled={isDisabled} type={type} onClick={onClick}>\r\n            {buttonText}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport './style.scss'\r\n\r\ninterface GreetingText {\r\n    greeting: string\r\n}\r\n\r\nconst GreetingText: React.FC<GreetingText> = ({ greeting }) => {\r\n    return (\r\n        <h1 className={'heading'}>\r\n            {greeting}\r\n            <span className={'heading__app-name'}> Chatty</span>\r\n            <span className={'heading__exclamation-mark'}>!</span>\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default GreetingText\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { UseFormRegisterReturn } from 'react-hook-form'\r\nimport Input from '../../atoms/Input'\r\nimport Icon from '../../atoms/Icon'\r\nimport './style.scss'\r\n\r\ninterface FormField {\r\n    label: string\r\n    placeholder: string\r\n    errorText: string | undefined\r\n    isError: boolean\r\n    register: UseFormRegisterReturn\r\n    name?: string\r\n    type?: string\r\n    select?: boolean\r\n    optionList?: []\r\n}\r\n\r\nconst FormField: React.FC<FormField> = ({\r\n    name,\r\n    placeholder,\r\n    type,\r\n    label,\r\n    errorText,\r\n    isError,\r\n    register,\r\n    select = false,\r\n    optionList = [],\r\n}) => {\r\n    const formFieldErrorClass = classNames({\r\n        'form-field__error-text': true,\r\n        'form-field__error-text_active': isError,\r\n    })\r\n\r\n    return (\r\n        <label htmlFor={name} className={'form-field'}>\r\n            <p className={'form-field__label-text'}>{label}</p>\r\n            {select ? (\r\n                <Input\r\n                    placeholder={placeholder}\r\n                    isError={isError}\r\n                    register={register}\r\n                    optionList={optionList}\r\n                    select={true}\r\n                />\r\n            ) : (\r\n                <Input\r\n                    name={name}\r\n                    type={type}\r\n                    placeholder={placeholder}\r\n                    isError={isError}\r\n                    register={register}\r\n                />\r\n            )}\r\n            {!select && isError && <Icon type={'input-error'} />}\r\n            <p className={formFieldErrorClass}>{errorText}</p>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default FormField\r\n","import React, { useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Icon from './../../atoms/Icon'\r\nimport Button from './../../atoms/Button'\r\nimport GreetingText from './../../atoms/GreetingText'\r\nimport FormField from './../../molecules/FormField'\r\nimport { AUTH_URL } from '../../../utils/api'\r\nimport { getFormData } from '../../../utils/utils'\r\nimport { LoginFormInterface } from '../../../utils/types'\r\nimport './style.scss'\r\n\r\ninterface AuthForm {\r\n    captchaURL: string\r\n    renderRegisterForm: () => void\r\n    handleToken: (token: string) => void\r\n}\r\n\r\nconst LoginForm: React.FC<AuthForm> = ({ captchaURL, renderRegisterForm, handleToken }) => {\r\n    const [error, setError] = useState<string | undefined>()\r\n    const [captchaError, setCaptchaError] = useState<string | undefined>()\r\n    const validationSchema = Yup.object().shape({\r\n        login: Yup.string()\r\n            .required('Login is required')\r\n            .min(2, 'Login must be at least 2 characters')\r\n            .max(50, 'Login must not exceed 50 characters'),\r\n        password: Yup.string()\r\n            .required('Password is required')\r\n            .min(2, 'Password must be at least 2 characters'),\r\n        captcha: Yup.string()\r\n            .required('Enter captcha (12345).')\r\n            .min(5, '12345')\r\n            .max(5, 'Must be 5 characters'),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors, isValid },\r\n    } = useForm<LoginFormInterface>({\r\n        resolver: yupResolver(validationSchema),\r\n        mode: 'onChange',\r\n    })\r\n    const onSubmit: SubmitHandler<LoginFormInterface> = (data) => {\r\n        const loginRequest = async (data: FormData, url: string) => {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                body: data,\r\n                credentials: 'same-origin',\r\n            })\r\n            if (response.status === 200) {\r\n                const token = await response.text()\r\n                handleToken(token)\r\n            }\r\n            if (response.status === 400) {\r\n                const error = await response.text()\r\n                if (error === 'Error on login or password!') {\r\n                    setError('Wrong login or password')\r\n                }\r\n                if (error === 'Captcha is wrong! Refresh captcha image!') {\r\n                    setCaptchaError('Captcha is wrong')\r\n                }\r\n            }\r\n        }\r\n        setError(undefined)\r\n        setCaptchaError(undefined)\r\n        loginRequest(getFormData(data), AUTH_URL)\r\n    }\r\n\r\n    return (\r\n        <div className={'login-form'}>\r\n            <div className={'login-form__background-mobile'} />\r\n            <div className={'login-form__logo-icons'}>\r\n                <Icon type={'logo'} />\r\n            </div>\r\n            <span className={'login-form__heading'}>\r\n                <GreetingText greeting={'Welcome to'} />\r\n            </span>\r\n            <h2 className={'login-form__subheading'}>Please, authorize yourself</h2>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={'login-form__input'}>\r\n                    <FormField\r\n                        placeholder={'Input user name'}\r\n                        type={'text'}\r\n                        label={'User name'}\r\n                        errorText={errors.login?.message || error}\r\n                        isError={(!isValid && !!errors.login?.message) || error !== undefined}\r\n                        register={register('login')}\r\n                    />\r\n                </div>\r\n                <div className={'login-form__input'}>\r\n                    <FormField\r\n                        placeholder={'Input password'}\r\n                        type={'password'}\r\n                        label={'Password'}\r\n                        errorText={errors.password?.message || error}\r\n                        isError={(!isValid && !!errors.password?.message) || error !== undefined}\r\n                        register={register('password')}\r\n                    />\r\n                </div>\r\n                <div className={'login-form__input'}>\r\n                    <div className={'login-form__captcha-input'}>\r\n                        <FormField\r\n                            placeholder={'Security code'}\r\n                            type={'text'}\r\n                            label={'Security code'}\r\n                            errorText={errors.captcha?.message || captchaError}\r\n                            isError={\r\n                                (!isValid && !!errors.captcha?.message) ||\r\n                                captchaError !== undefined\r\n                            }\r\n                            register={register('captcha')}\r\n                        />\r\n                    </div>\r\n                    <div className={'login-form__captcha-img'}>\r\n                        <img src={captchaURL} alt=\"captcha\" />\r\n                    </div>\r\n                </div>\r\n                <div className={'login-form__buttons'}>\r\n                    <div className={'login-form__button'}>\r\n                        <Button type={'submit'} buttonText={'Log In'} isDisabled={false} />\r\n                    </div>\r\n                    <div className={'login-form__button'}>\r\n                        <Button\r\n                            type={'button'}\r\n                            buttonText={'Registration'}\r\n                            isPrimary={false}\r\n                            isDisabled={false}\r\n                            onClick={renderRegisterForm}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { useEffect, useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Icon from '../../atoms/Icon'\r\nimport GreetingText from '../../atoms/GreetingText'\r\nimport FormField from '../../molecules/FormField'\r\nimport Button from '../../atoms/Button'\r\nimport { GENDERS_URL, REGISTRATION_URL } from '../../../utils/api'\r\nimport { getFormData } from '../../../utils/utils'\r\nimport { RegisterFormInterface } from '../../../utils/types'\r\nimport './style.scss'\r\n\r\ninterface AuthForm {\r\n    captchaURL: string\r\n    renderLoginForm: () => void\r\n}\r\n\r\nconst RegisterForm: React.FC<AuthForm> = ({ captchaURL, renderLoginForm }) => {\r\n    const [captchaError, setCaptchaError] = useState<string | undefined>()\r\n    const validationSchema = Yup.object().shape({\r\n        login: Yup.string()\r\n            .required('Login is required')\r\n            .min(2, 'Login must be at least 2 characters')\r\n            .max(50, 'Login must not exceed 50 characters'),\r\n        password: Yup.string()\r\n            .required('Password is required')\r\n            .min(2, 'Password must be at least 2 characters'),\r\n        password_confirm: Yup.string()\r\n            .required('Password confirmation is required')\r\n            .when('password', (password, field) =>\r\n                password\r\n                    ? field\r\n                          .required('Password confirmation is required')\r\n                          .oneOf([Yup.ref('password')], 'Passwords not match')\r\n                    : field\r\n            ),\r\n        name: Yup.string()\r\n            .required('Name is required')\r\n            .min(2, 'Name must be at least 2 characters')\r\n            .max(50),\r\n        gender_id: Yup.number().min(1, 'Choose your gender'),\r\n        captcha: Yup.string()\r\n            .required('Enter captcha')\r\n            .min(5, 'Must be 5 characters')\r\n            .max(5, 'Must be 5 characters'),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { errors, isValid },\r\n    } = useForm<RegisterFormInterface>({\r\n        resolver: yupResolver(validationSchema),\r\n        mode: 'onTouched',\r\n    })\r\n\r\n    const onSubmit: SubmitHandler<RegisterFormInterface> = (data) => {\r\n        const registerRequest = async (data: FormData, url: string) => {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                body: data,\r\n                credentials: 'same-origin',\r\n            })\r\n            if (response.status === 200) {\r\n                reset()\r\n            }\r\n            if (response.status === 400) {\r\n                const error = await response.text()\r\n                console.error(error)\r\n                if (error === 'Captcha is wrong! Refresh captcha image!') {\r\n                    setCaptchaError('Captcha is wrong')\r\n                }\r\n            }\r\n        }\r\n        registerRequest(getFormData(data), REGISTRATION_URL)\r\n    }\r\n\r\n    const [genderList, setGenderList] = useState<[]>([])\r\n\r\n    useEffect(() => {\r\n        const fetchGenders = async (url: string) => {\r\n            const response = await fetch(url)\r\n            if (response.ok) {\r\n                const data = await response.json()\r\n                setGenderList(data.genders)\r\n            }\r\n        }\r\n        fetchGenders(GENDERS_URL)\r\n    }, [])\r\n    return (\r\n        <div className={'register-form'}>\r\n            <div className={'register-form__logo-icons'}>\r\n                <Icon type={'logo'} />\r\n            </div>\r\n            <span className={'register-form__heading'}>\r\n                <GreetingText greeting={'Sign Up to'} />\r\n            </span>\r\n            <h2 className={'register-form__subheading'}>Registration</h2>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={'register-form__input'}>\r\n                    <FormField\r\n                        placeholder={'Input user name'}\r\n                        type={'text'}\r\n                        label={'Create user name'}\r\n                        errorText={errors.login?.message}\r\n                        isError={!isValid && !!errors.login?.message}\r\n                        register={register('login')}\r\n                    />\r\n                </div>\r\n                <div className={'register-form__input'}>\r\n                    <FormField\r\n                        placeholder={'Input password'}\r\n                        type={'password'}\r\n                        label={'Create password'}\r\n                        errorText={errors.password?.message}\r\n                        isError={!isValid && !!errors.password?.message}\r\n                        register={register('password')}\r\n                    />\r\n                </div>\r\n                <div className={'register-form__input'}>\r\n                    <FormField\r\n                        placeholder={'Password confirmation'}\r\n                        type={'password'}\r\n                        label={'Password confirmation'}\r\n                        errorText={errors.password_confirm?.message}\r\n                        isError={!isValid && !!errors.password_confirm?.message}\r\n                        register={register('password_confirm')}\r\n                    />\r\n                </div>\r\n                <div className={'register-form__input'}>\r\n                    <FormField\r\n                        placeholder={'Nickname'}\r\n                        type={'text'}\r\n                        label={'Nickname'}\r\n                        errorText={errors.name?.message}\r\n                        isError={!isValid && !!errors.name?.message}\r\n                        register={register('name')}\r\n                    />\r\n                </div>\r\n                <div className={'register-form__input register-form__input-gender'}>\r\n                    <FormField\r\n                        placeholder={'Your gender'}\r\n                        label={'Your gender'}\r\n                        errorText={errors.gender_id?.message}\r\n                        isError={!isValid && !!errors.gender_id?.message}\r\n                        register={register('gender_id')}\r\n                        select={true}\r\n                        optionList={genderList}\r\n                    />\r\n                </div>\r\n                <div className={'register-form__input'}>\r\n                    <div className={'register-form__captcha-input'}>\r\n                        <FormField\r\n                            placeholder={'Security code'}\r\n                            type={'text'}\r\n                            label={'Security code'}\r\n                            errorText={errors.captcha?.message || captchaError}\r\n                            isError={\r\n                                (!isValid && !!errors.captcha?.message) ||\r\n                                captchaError !== undefined\r\n                            }\r\n                            register={register('captcha')}\r\n                        />\r\n                    </div>\r\n                    <div className={'register-form__captcha-img'}>\r\n                        <img src={captchaURL} alt=\"captcha\" />\r\n                    </div>\r\n                </div>\r\n                <div className={'register-form__buttons'}>\r\n                    <div className={'register-form__button'}>\r\n                        <Button type={'submit'} buttonText={'Register'} isDisabled={false} />\r\n                    </div>\r\n                    <div className={'register-form__button'}>\r\n                        <Button\r\n                            type={'button'}\r\n                            buttonText={'Log In'}\r\n                            isPrimary={false}\r\n                            isDisabled={false}\r\n                            onClick={renderLoginForm}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n","import React, { useState } from 'react'\r\nimport AuthTemplate from '../../components/templates/AuthTemplate'\r\nimport LoginForm from '../../components/organisms/LoginForm'\r\nimport RegisterForm from '../../components/organisms/RegisterForm'\r\nimport { CAPTCHA_URL } from '../../utils/api'\r\n\r\ninterface AuthPage {\r\n    handleToken: (token: string) => void\r\n}\r\n\r\nconst AuthPage: React.FC<AuthPage> = ({ handleToken }) => {\r\n    const [registerForm, setRegisterForm] = useState<boolean>(false)\r\n    const renderRegisterForm = () => {\r\n        setRegisterForm(true)\r\n    }\r\n    const renderLoginForm = () => {\r\n        setRegisterForm(false)\r\n    }\r\n    return (\r\n        <AuthTemplate>\r\n            {registerForm ? (\r\n                <RegisterForm captchaURL={CAPTCHA_URL} renderLoginForm={renderLoginForm} />\r\n            ) : (\r\n                <LoginForm captchaURL={CAPTCHA_URL} renderRegisterForm={renderRegisterForm} handleToken={handleToken} />\r\n            )}\r\n        </AuthTemplate>\r\n    )\r\n}\r\n\r\nexport default AuthPage\r\n","import { useState } from 'react'\r\n\r\ninterface UseTokenInterface {\r\n    setToken: (userToken: string) => void\r\n    token: string | undefined\r\n}\r\n\r\nconst useToken = (): UseTokenInterface => {\r\n    const getToken = (): string | undefined => {\r\n        return localStorage.getItem('token')?.slice(1, -1)\r\n    }\r\n\r\n    const [token, setToken] = useState(getToken())\r\n\r\n    const saveToken = (userToken: string): void => {\r\n        localStorage.setItem('token', userToken)\r\n        setToken(userToken)\r\n    }\r\n\r\n    return {\r\n        setToken: saveToken,\r\n        token,\r\n    }\r\n}\r\n\r\nexport default useToken\r\n","import React from 'react'\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\r\nimport AuthPage from './pages/AuthPage'\r\nimport ChatTemplate from './components/templates/ChatTemplate'\r\nimport useToken from './hooks/useToken'\r\nimport './App.scss'\r\n\r\nconst ChatPage = React.lazy(() => import('./pages/ChatPage'))\r\n\r\nfunction App(): React.ReactElement {\r\n    const { token, setToken } = useToken()\r\n    const handleToken = (token: string): void => {\r\n        setToken(token)\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                {token && (\r\n                    <>\r\n                        <React.Suspense fallback={<ChatTemplate isSuspended={true} />}>\r\n                            <Route exact path={'/chat'} component={ChatPage} />\r\n                        </React.Suspense>\r\n                        <Redirect to={'/chat'} />\r\n                    </>\r\n                )}\r\n                {token === undefined && (\r\n                    <>\r\n                        <Route exact path={'/'}>\r\n                            <AuthPage handleToken={handleToken} />\r\n                        </Route>\r\n                        <Redirect to={'/'} />\r\n                    </>\r\n                )}\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n","// eslint-disable-next-line\r\nexport const getFormData = (object: any): FormData => {\r\n    const formData = new FormData()\r\n    Object.keys(object).forEach((key) => formData.append(key, object[key]))\r\n    return formData\r\n}\r\n\r\nexport const openInNewTab = (url: string): void => {\r\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\r\n    if (newWindow) newWindow.opener = null\r\n}\r\n","import { WS_CONNECTION_URL } from './api'\r\nimport { runInAction } from 'mobx'\r\nimport { store } from '../stores/store'\r\n\r\nclass WebsocketInstance {\r\n    socketInstance: null | WebSocket\r\n    socketChat: null | WebSocket\r\n\r\n    constructor() {\r\n        this.socketInstance = null\r\n        this.socketChat = null\r\n    }\r\n\r\n    connect() {\r\n        const token: string | undefined = localStorage.getItem('token')?.slice(1, -1)\r\n        const path = WS_CONNECTION_URL + '?type=mark&ws_id=' + token\r\n        this.socketInstance = new WebSocket(path)\r\n\r\n        this.socketInstance.onopen = () => {\r\n            this.websocketSendType('users_list')\r\n            this.websocketSendType('user_data')\r\n        }\r\n\r\n        this.socketInstance.onmessage = (event: MessageEvent) => {\r\n            const eventData = event.data\r\n            if (event.data === \"Get param 'ws_id' - is wrong! Please relogin!\") {\r\n                this.socketInstance?.close(1000, 'Token expired.')\r\n                localStorage.removeItem('token')\r\n            }\r\n            runInAction(() => {\r\n                if (eventData.includes('user_data')) {\r\n                    store.user = JSON.parse(eventData).data\r\n                    this.socketInstance?.send(`${store.user?.name}_${store.user?.gender}_connected`)\r\n                }\r\n                if (eventData.includes('users_list')) {\r\n                    store.users = JSON.parse(eventData).data\r\n                }\r\n            })\r\n            if (eventData.includes('_connected')) {\r\n                if (!eventData.includes(`${store.user?.name}_${store.user?.gender}`)) {\r\n                    this.websocketSendType('users_list')\r\n                }\r\n            }\r\n            if (eventData.includes('_disconnected')) {\r\n                this.websocketSendType('users_list')\r\n            }\r\n        }\r\n\r\n        this.socketInstance.onerror = (event: Event) => {\r\n            console.error(event)\r\n        }\r\n\r\n        this.socketInstance.onclose = () => {\r\n            //\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.socketInstance?.send(`${store.user?.name}_${store.user?.gender}_disconnected`)\r\n        this.socketInstance?.close()\r\n        localStorage.removeItem('token')\r\n    }\r\n\r\n    chatConnect(): void {\r\n        const token: string | undefined = localStorage.getItem('token')?.slice(1, -1)\r\n        if (store.user && store.person) {\r\n            const namesArray: string[] = [store.user.name, store.person.name].sort()\r\n            const connectionKey: string | undefined = namesArray.join('').toLowerCase()\r\n            const path = WS_CONNECTION_URL + '?type=' + connectionKey + '&ws_id=' + token\r\n            this.socketChat = new WebSocket(path)\r\n\r\n            this.socketChat.onmessage = (event: MessageEvent) => {\r\n                if (event.data === \"Get param 'ws_id' - is wrong! Please relogin!\") {\r\n                    this.socketChat?.close(1000, 'Token expired.')\r\n                    localStorage.removeItem('token')\r\n                }\r\n                const parsedEventData = JSON.parse(event.data.slice(1, -1))\r\n                runInAction(() => {\r\n                    if (parsedEventData.type === 'message') {\r\n                        store.messages.push(parsedEventData)\r\n                    }\r\n                })\r\n            }\r\n            this.socketChat.onerror = (event: Event) => {\r\n                console.error(event)\r\n            }\r\n        }\r\n    }\r\n\r\n    sendMessage(message: string): void {\r\n        this.socketChat?.send(\r\n            `'${JSON.stringify({\r\n                type: 'message',\r\n                senderId: store.user?.name,\r\n                text: message,\r\n                file: store.outFile,\r\n                date: new Date(),\r\n            })}'`\r\n        )\r\n        runInAction(() => {\r\n            store.outFile = undefined\r\n        })\r\n    }\r\n\r\n    websocketSendType(type: string): void {\r\n        this.socketInstance?.send(\r\n            JSON.stringify({\r\n                type: type,\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nexport const websocketInstance = new WebsocketInstance()\r\n","import React, { ChangeEvent } from 'react'\r\nimport { UseFormRegisterReturn } from 'react-hook-form'\r\nimport classNames from 'classnames'\r\nimport './style.scss'\r\n\r\ninterface Input {\r\n    optionList?: []\r\n    select?: boolean\r\n    name?: string\r\n    placeholder: string\r\n    type?: string\r\n    isError?: boolean\r\n    noBorder?: boolean\r\n    register?: UseFormRegisterReturn\r\n    onChange?: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst Input: React.FC<Input> = ({\r\n    placeholder,\r\n    type,\r\n    name,\r\n    isError,\r\n    noBorder,\r\n    register,\r\n    optionList = [],\r\n    select = false,\r\n    onChange,\r\n}) => {\r\n    const inputClass = classNames({\r\n        input: true,\r\n        input_errored: isError,\r\n        input_borderless: noBorder,\r\n    })\r\n\r\n    return !select ? (\r\n        <input\r\n            className={inputClass}\r\n            id={name}\r\n            name={name}\r\n            type={type}\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n            {...register}\r\n        />\r\n    ) : (\r\n        <select className={inputClass} name={name} defaultValue={-1} {...register}>\r\n            <option value={-1} disabled hidden>\r\n                {placeholder}\r\n            </option>\r\n            {optionList.map((item, id: number) => {\r\n                const values: Array<string | number> = Object.values(item)\r\n                const capitalisedLetter: string = values[1].toString().slice(0, 1).toUpperCase()\r\n                const rest: string = values[1].toString().slice(1)\r\n                return (\r\n                    <option key={id} value={values[0]}>\r\n                        {capitalisedLetter + rest}\r\n                    </option>\r\n                )\r\n            })}\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport './style.scss'\r\n\r\ninterface LastSeenMessage {\r\n    timePassed: string\r\n}\r\n\r\nconst LastSeenMessage: React.FC<LastSeenMessage> = ({ timePassed }) => {\r\n    return <p className={'last-seen-message'}>Last seen {timePassed} ago</p>\r\n}\r\n\r\nexport default LastSeenMessage\r\n","import React from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport LastSeenMessage from '../../atoms/LastSeenMessage'\r\nimport Icon from '../../atoms/Icon'\r\nimport { store } from '../../../stores/store'\r\nimport './style.scss'\r\n\r\ninterface ChatCompanion {\r\n    closeMessages: () => void\r\n}\r\n\r\nconst ChatCompanion: React.FC<ChatCompanion> = ({ closeMessages }) => {\r\n    const companion = store.person\r\n    return (\r\n        <div className={'chat-companion'}>\r\n            {window.innerWidth <= 600 && (\r\n                <div className={'chat-companion__mobile'}>\r\n                    <span\r\n                        className={'chat-companion__icon chat-companion__back-icon'}\r\n                        onClick={closeMessages}\r\n                    >\r\n                        <Icon type={'arrow-back'} />\r\n                    </span>\r\n                    <span className={'chat-companion__icon'}>\r\n                        <Icon type={companion ? companion.gender : 'male'} />\r\n                    </span>\r\n                </div>\r\n            )}\r\n            <div className={'chat-companion__main'}>\r\n                <h3>{companion?.name}</h3>\r\n                <LastSeenMessage timePassed={'3 minutes'} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(ChatCompanion)\r\n","import React, { ChangeEvent, useRef } from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport { runInAction } from 'mobx'\r\nimport Input from '../../atoms/Input'\r\nimport Icon from '../../atoms/Icon'\r\nimport { websocketInstance } from '../../../utils/websocket'\r\nimport { BASE_URL, FILE_UPLOAD_URL } from '../../../utils/api'\r\nimport { store } from '../../../stores/store'\r\nimport './style.scss'\r\n\r\ninterface ChatInputArea {\r\n    text: string\r\n    file: File\r\n}\r\n\r\nconst ChatInputArea: React.FC = () => {\r\n    const hiddenFileInput = useRef<HTMLInputElement>(null)\r\n    const { register, handleSubmit, reset } = useForm<ChatInputArea>()\r\n\r\n    const fileInputClick = () => {\r\n        hiddenFileInput.current?.click()\r\n    }\r\n\r\n    const fileInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            const file = event.target.files[0]\r\n            const formData = new FormData()\r\n            formData.append('0', file)\r\n            const response = await fetch(FILE_UPLOAD_URL, {\r\n                method: 'POST',\r\n                body: formData,\r\n                credentials: 'same-origin',\r\n            })\r\n            if (response.status === 200) {\r\n                const fileUrl = await response.text()\r\n                runInAction(() => {\r\n                    store.outFile = {\r\n                        name: file.name,\r\n                        size: file.size,\r\n                        url: BASE_URL + fileUrl,\r\n                    }\r\n                })\r\n            }\r\n            if (response.status === 400) {\r\n                const error = await response.text()\r\n                console.error(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSend: SubmitHandler<ChatInputArea> = (data) => {\r\n        if (data.text === '') {\r\n            return false\r\n        }\r\n        websocketInstance.sendMessage(data.text)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(handleSend)}>\r\n            <div className={'chat-input-area'}>\r\n                <div className={'chat-input-area__attachment-icon'}>\r\n                    <input\r\n                        className={'chat-input-area__file-input'}\r\n                        type=\"file\"\r\n                        ref={hiddenFileInput}\r\n                        onChange={fileInputChange}\r\n                    />\r\n                    <button onClick={fileInputClick}>\r\n                        <Icon type={'attachment'} />\r\n                    </button>\r\n                </div>\r\n\r\n                <div className={'chat-input-area__input'}>\r\n                    <Input\r\n                        placeholder={'Write something...'}\r\n                        type={'text'}\r\n                        noBorder={true}\r\n                        register={register('text')}\r\n                    />\r\n                </div>\r\n                <div className={'chat-input-area__send-icon'}>\r\n                    <button>\r\n                        <Icon type={'send'} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ChatInputArea\r\n","import React from 'react'\r\n\r\ninterface Text {\r\n    text: string\r\n}\r\n\r\nconst Text: React.FC<Text> = ({ text }) => {\r\n    return <p>{text}</p>\r\n}\r\n\r\nexport default Text\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport Text from '../../atoms/Text'\r\nimport Icon from '../../atoms/Icon'\r\nimport { openInNewTab } from '../../../utils/utils'\r\nimport { FileType } from '../../../utils/types'\r\nimport './style.scss'\r\n\r\ninterface Bubble {\r\n    text: string\r\n    isIncoming: boolean\r\n    file: FileType | undefined\r\n}\r\n\r\nconst Bubble: React.FC<Bubble> = ({ text, isIncoming, file }) => {\r\n    const bubbleClass = classNames({\r\n        bubble: true,\r\n        bubble_incoming: isIncoming,\r\n        bubble_outgoing: !isIncoming,\r\n    })\r\n\r\n    const handleClick = () => {\r\n        if (file) {\r\n            file.url && openInNewTab(file.url)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={bubbleClass}>\r\n            <div className={'bubble__text'}>\r\n                <Text text={text} />\r\n            </div>\r\n            {file && (\r\n                <div className={'bubble__file'} onClick={handleClick}>\r\n                    <Icon type={'file'}/>\r\n                    <div className={'bubble__file-info'}>\r\n                        <p className={'bubble__file-name'}>{file.name}</p>\r\n                        <Text text={((file?.size / 1024) / 1024).toString().slice(0, 4) + ' MB'} />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bubble\r\n","import React, { useRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport { observer } from 'mobx-react-lite'\r\nimport Bubble from '../../molecules/Bubble'\r\nimport { store } from '../../../stores/store'\r\nimport './style.scss'\r\n\r\nconst ChatMessages: React.FC = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    return (\r\n        <div className={'chat-messages'}>\r\n            {store.messages.map(({ text, senderId, file, date }) => {\r\n                const messageAreaClass = classNames({\r\n                    'chat-messages__message-area': true,\r\n                    'chat-messages__message-area_outgoing': senderId === store.user?.name,\r\n                    'chat-messages__message-area_incoming': senderId === store.person?.name,\r\n                })\r\n                const key: string = senderId + date\r\n                // todo somehow fix focus on last message\r\n                return (\r\n                    <div className={messageAreaClass} key={key}>\r\n                        <Bubble\r\n                            text={text}\r\n                            isIncoming={senderId === store.person?.name}\r\n                            file={file}\r\n                        />\r\n                    </div>\r\n                )\r\n            })}\r\n            <div ref={messagesAnchorRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(ChatMessages)\r\n","import React from 'react'\nimport ChatCompanion from '../../molecules/ChatCompanion'\nimport ChatInputArea from '../../molecules/ChatInputArea'\nimport ChatMessages from '../ChatMessages'\nimport './style.scss'\n\ninterface Chat {\n    closeMessages: () => void\n}\n\nconst Chat: React.FC<Chat> = ({ closeMessages }) => {\n    return (\n        <div className={'chat'}>\n            <div className={'chat__companion'}>\n                <ChatCompanion closeMessages={closeMessages} />\n            </div>\n            <div className={'chat__messages'}>\n                <ChatMessages />\n            </div>\n            <div className={'chat__input-area'}>\n                <ChatInputArea />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import React from 'react'\r\nimport Icon from './../../atoms/Icon'\r\nimport './style.scss'\r\n\r\nconst ChatHeader: React.FC = () => {\r\n    return (\r\n        <div className={'chat-header'}>\r\n            <div className={'chat-header__logo-icons'}>\r\n                <Icon type={'logo'} />\r\n            </div>\r\n            <div className={'chat-header__profile-icon'}>\r\n                <Icon type={'header-profile'} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React from 'react'\r\nimport './style.scss'\r\n\r\ninterface Text2 {\r\n    text: string\r\n}\r\n\r\nconst Text2: React.FC<Text2> = ({ text }) => {\r\n    return <p className={'text2'}>{text}</p>\r\n}\r\n\r\nexport default Text2\r\n","import React, { useEffect, useState } from 'react'\r\nimport classNames from 'classnames'\r\nimport { runInAction } from 'mobx'\r\nimport { observer } from 'mobx-react-lite'\r\nimport Icon from '../../atoms/Icon'\r\nimport Text2 from '../../atoms/Text2'\r\nimport { store } from '../../../stores/store'\r\nimport { websocketInstance } from '../../../utils/websocket'\r\nimport './style.scss'\r\n\r\ninterface ChatPreview {\r\n    name: string\r\n    gender: string\r\n    chatId: number\r\n    selectedChat: number | undefined\r\n    text: string\r\n    isOutgoing: boolean\r\n}\r\n\r\nconst ChatPreview: React.FC<ChatPreview> = ({\r\n    chatId,\r\n    text,\r\n    name,\r\n    selectedChat,\r\n    isOutgoing,\r\n    gender,\r\n}) => {\r\n    const [isActive, setActive] = useState<boolean>(false)\r\n    const chatPreviewClass = classNames({\r\n        'chat-preview': true,\r\n        'chat-preview_active': isActive,\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (window.innerWidth > 600) {\r\n            selectedChat === chatId ? setActive(true) : setActive(false)\r\n        }\r\n    }, [selectedChat, chatId])\r\n\r\n    if (text?.length > 27) {\r\n        text = text.substring(0, 27) + '...'\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={chatPreviewClass}\r\n            onClick={() => {\r\n                store.openMessages(chatId, name, gender)\r\n                if (!websocketInstance.socketChat) {\r\n                    websocketInstance.chatConnect()\r\n                }\r\n                if (localStorage.getItem('messages')) {\r\n                    const mes = localStorage.getItem('messages')\r\n                    mes &&\r\n                        runInAction(() => {\r\n                            store.messages = JSON.parse(mes)\r\n                        })\r\n                }\r\n            }}\r\n        >\r\n            <div className={'chat-preview__user-icon'}>\r\n                <Icon type={gender} />\r\n            </div>\r\n            <div className={'chat-preview__user-info'}>\r\n                <h4 className={'chat-preview__user-name'}>{name}</h4>\r\n                <div className={'chat-preview__last-message'}>\r\n                    {isOutgoing && <span className={'text2'}>You: </span>}\r\n                    <Text2 text={text} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(ChatPreview)\r\n","import React from 'react'\r\nimport Icon from '../../atoms/Icon'\r\nimport './style.scss'\r\n\r\nconst NoChatsMessage: React.FC = () => {\r\n    return (\r\n        <div className={'no-chats-message'}>\r\n            <Icon type={'no-chat'} />\r\n            <p className={'no-chats-message__text'}>\r\n                There is no other users yet\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoChatsMessage\r\n","import React from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport ChatPreview from '../../molecules/ChatPreview'\r\nimport NoChatsMessage from '../../molecules/NoChatsMessage'\r\nimport { store } from '../../../stores/store'\r\nimport './style.scss'\r\n\r\nconst ChatSideBar: React.FC = () => {\r\n    return (\r\n        <div className={'chat-sidebar'}>\r\n            {!store.users || store.users.length === 1 ? (\r\n                <NoChatsMessage />\r\n            ) : (\r\n                store.users.map(({ name, gender }, index: number) => {\r\n                    if (name !== store.user?.name) {\r\n                        const key = name + gender + index\r\n                        return (\r\n                            <ChatPreview\r\n                                key={key}\r\n                                chatId={index}\r\n                                name={name}\r\n                                gender={gender}\r\n                                selectedChat={store.selectedChat}\r\n                                text={\"I'll show you who's the boss of this gym.\"}\r\n                                isOutgoing={true}\r\n                            />\r\n                        )\r\n                    }\r\n                })\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(ChatSideBar)\r\n","import React from 'react'\r\nimport './style.scss'\r\n\r\nconst SelectChatMessage: React.FC = () => {\r\n    return (\r\n        <div className={'select-chat-message'}>\r\n            <p>Select a chat to start messaging</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectChatMessage\r\n","import React, { useState } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport classNames from 'classnames'\r\nimport Icon from '../../atoms/Icon'\r\nimport Chat from '../../organisms/Chat'\r\nimport ChatHeader from '../../molecules/ChatHeader'\r\nimport ChatSideBar from '../../organisms/ChatSideBar'\r\nimport SelectChatMessage from '../../molecules/SelectChatMessage'\r\nimport { store } from '../../../stores/store'\r\nimport './style.scss'\r\n\r\ninterface ChatTemplate {\r\n    isSuspended?: boolean\r\n}\r\n\r\nconst ChatTemplate: React.FC<ChatTemplate> = ({ isSuspended = false }) => {\r\n    const [isHeaderHidden, setHeaderHidden] = useState<boolean>(false)\r\n    const [isSideBarHidden, setSideBarHidden] = useState<boolean>(false)\r\n    const [isChatVisible, setChatVisible] = useState<boolean>(false)\r\n\r\n    const sideBarClass = classNames({\r\n        'chat-template__sidebar': true,\r\n        'chat-template__sidebar_hidden': isSideBarHidden,\r\n    })\r\n    const chatClass = classNames({\r\n        'chat-template__chat': true,\r\n        'chat-template__chat_visible': isChatVisible,\r\n    })\r\n    const openMessages = (): void => {\r\n        if (window.innerWidth <= 600) {\r\n            setChatVisible(true)\r\n            setSideBarHidden(true)\r\n            hideHeader(true)\r\n        }\r\n    }\r\n    const closeMessages = (): void => {\r\n        if (window.innerWidth <= 600) {\r\n            setChatVisible(false)\r\n            setSideBarHidden(false)\r\n            hideHeader(false)\r\n        }\r\n    }\r\n    const hideHeader = (hide: boolean): void => {\r\n        hide && setHeaderHidden(true)\r\n        !hide && setHeaderHidden(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!isHeaderHidden && <ChatHeader />}\r\n            <div className={'chat-template'}>\r\n                <div className={sideBarClass} onClick={openMessages}>\r\n                    {!isSuspended && <ChatSideBar />}\r\n                </div>\r\n                <div className={chatClass}>\r\n                    {isSuspended && (\r\n                        <div className={'chat-template__chat-loading'}>\r\n                            <Icon type={'loading'} />\r\n                        </div>\r\n                    )}\r\n                    {!isSuspended &&\r\n                        (!store.person ? (\r\n                            <SelectChatMessage />\r\n                        ) : (\r\n                            <Chat closeMessages={closeMessages} />\r\n                        ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ChatTemplate)\r\n","export default __webpack_public_path__ + \"static/media/vector-left.28b4d8b2.svg\";","export default __webpack_public_path__ + \"static/media/vector-right.fe1e5f9a.svg\";","export default __webpack_public_path__ + \"static/media/attachment-icon.60f1c92a.svg\";","export default __webpack_public_path__ + \"static/media/user-icon-male.b2f2a417.svg\";","export default __webpack_public_path__ + \"static/media/user-icon-female.d5ca2959.svg\";","export default __webpack_public_path__ + \"static/media/error-input-icon.dd5c433f.svg\";","export default __webpack_public_path__ + \"static/media/send-icon.246f991e.svg\";","export default __webpack_public_path__ + \"static/media/no-chats-icon.2a176518.svg\";","export default __webpack_public_path__ + \"static/media/header-profile-icon.ab9333aa.svg\";","export default __webpack_public_path__ + \"static/media/back-arrow-icon.d3fd6ea1.svg\";","export default __webpack_public_path__ + \"static/media/loading-icon.f6ac7860.svg\";","export default __webpack_public_path__ + \"static/media/file-icon.7ac9e975.svg\";","import React from 'react'\r\nimport leftIcon from '../../../assets/vector-left.svg'\r\nimport rightIcon from '../../../assets/vector-right.svg'\r\nimport attachmentIcon from './../../../assets/attachment-icon.svg'\r\nimport maleIcon from '../../../assets/user-icon-male.svg'\r\nimport femaleIcon from '../../../assets/user-icon-female.svg'\r\nimport errorIcon from '../../../assets/error-input-icon.svg'\r\nimport sendIcon from '../../../assets/send-icon.svg'\r\nimport noChatsIcon from '../../../assets/no-chats-icon.svg'\r\nimport profileIcon from '../../../assets/header-profile-icon.svg'\r\nimport arrowBackIcon from '../../../assets/back-arrow-icon.svg'\r\nimport loadingIcon from '../../../assets/loading-icon.svg'\r\nimport fileIcon from '../../../assets/file-icon.svg'\r\nimport './style.scss'\r\n\r\ninterface Icon {\r\n    type:\r\n        | 'logo'\r\n        | 'attachment'\r\n        | 'male'\r\n        | 'female'\r\n        | 'input-error'\r\n        | 'send'\r\n        | 'no-chat'\r\n        | 'header-profile'\r\n        | 'arrow-back'\r\n        | 'loading'\r\n        | 'file'\r\n        | string\r\n}\r\n\r\nconst Icon: React.FC<Icon> = ({ type }) => {\r\n    return (\r\n        <>\r\n            {type === 'logo' && (\r\n                <>\r\n                    <img src={leftIcon} alt=\"logo icon\" />\r\n                    <img src={rightIcon} alt=\"logo icon\" />\r\n                </>\r\n            )}\r\n            {type === 'attachment' && <img src={attachmentIcon} alt={'attachment icon'} />}\r\n            {type === 'male' && <img src={maleIcon} alt=\"user icon\" />}\r\n            {type === 'female' && <img src={femaleIcon} alt=\"user icon\" />}\r\n\r\n            {type === 'input-error' && (\r\n                <img\r\n                    className={'input-error-icon'}\r\n                    src={errorIcon}\r\n                    alt=\"input verification fail icon\"\r\n                />\r\n            )}\r\n            {type === 'send' && <img src={sendIcon} alt=\"send icon\" />}\r\n            {type === 'no-chat' && <img src={noChatsIcon} alt=\"no chats icon\" />}\r\n            {type === 'header-profile' && (\r\n                <img className={'header-profile'} src={profileIcon} alt={'profile icon'} />\r\n            )}\r\n            {type === 'arrow-back' && <img src={arrowBackIcon} alt=\"arrow back icon\" />}\r\n            {type === 'loading' && <img src={loadingIcon} alt=\"loading icon\" />}\r\n            {type === 'file' && <img src={fileIcon} alt=\"file icon\" />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Icon\r\n"],"sourceRoot":""}